syntax = "proto3";
package proto;

import "appraisal_context.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "state.proto";
import "token.proto";

option go_package = "github.com/veraison/services/proto";

message Status {
  bool result = 1;
  string error_detail = 2;
}

message Evidence {
  google.protobuf.Struct value = 1;
}

message SubmitEndorsementsRequest {
  string media_type =1;
  bytes data  = 2;
}

message SubmitEndorsementsResponse {
  Status status = 1;
}
/* 
The TrustAnchor and Reference Value messages, below 
and associated structures do not belong here
They will be removed in subsequent refactor
Please see issue #176
*/
// protolint:disable ENUM_FIELD_NAMES_PREFIX
enum EndorsementType {
  UNSPECIFIED = 0;
  REFERENCE_VALUE = 1;
  VERIFICATION_KEY = 2;
}

message AddRefValuesRequest {
  repeated Endorsement reference_values = 1;
}

message AddRefValuesResponse {
  Status status = 1;
}

message Endorsement {
  string scheme = 1;
  EndorsementType type = 2;
  /* sub_type is opaque to Veraison and is used by schemes to classify range of
     Endorsement sub types for a given Endorsement type. It is assumed that
     there is going to be only one single sub type required */
  string sub_type = 3;
  google.protobuf.Struct attributes = 4;
}

message AddTrustAnchorRequest {
  Endorsement trust_anchor = 1;
}

message AddTrustAnchorResponse {
  Status status = 1;
}

message MediaTypeList {
  repeated string media_types = 1;
}

message PublicKey {
  string key = 1;
}

// Client interface for the Veraison Trusted Services component.
// protolint:disable MAX_LINE_LENGTH
service VTS {
  // Return the summary state of the service.
  rpc GetServiceState(google.protobuf.Empty) returns (ServiceState);

  // Returns attestation information -- evidences, endorsed claims, trust
  // vector, etc -- for the provided attestation token data.
  rpc GetAttestation(AttestationToken) returns (AppraisalContext);
  rpc GetSupportedVerificationMediaTypes(google.protobuf.Empty) returns (MediaTypeList);

  rpc GetSupportedProvisioningMediaTypes(google.protobuf.Empty) returns (MediaTypeList);
  rpc SubmitEndorsements(SubmitEndorsementsRequest) returns (SubmitEndorsementsResponse);

  // Returns the public key used to sign evidence.
  rpc GetEARSigningPublicKey(google.protobuf.Empty) returns (PublicKey);
}

