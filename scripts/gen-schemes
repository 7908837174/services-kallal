#!/usr/bin/env python
# Copyright 2023 Contributors to the Veraison project.
# SPDX-License-Identifier: Apache-2.0

import logging
import os
import re
import shutil
import string
import sys
import subprocess


PLUGIN_INTERFACE = 'github.com/veraison/services/plugin.IPluggable'

TEMPLATE = string.Template('''\
package ${package}

import (
	"github.com/veraison/services/plugin"

${imports}

)

var plugins = []plugin.IPluggable{
${implementations}
}
''')


class FoundStruct:
    """
    Information of a golang struct defition, incluing the struct's name and its
    location within the file that defines it.
    """

    def __init__(self, name, path, line, col):
        self.name = name
        self.path = path
        self.line = line
        self.col = col


def find_implementations(iface, dirpath):
    """
    Walk dirpath looking for definitions of structs implementing the specified
    iface.

    Returns a sequence of FoundStruct's.
    """
    implementations = []
    for root, dirs, files in os.walk(dirpath):
        for file in files:
            if os.path.splitext(file)[1] == '.go':
                filepath = os.path.join(root, file)
                structs = get_structs(filepath)
                for struct in structs:
                    if check_implements(struct, iface):
                        implementations.append(struct)

    return implementations


def get_structs(filepath):
    """
    Returns a sequences of FoundStruct's with information on struct definitions
    found with the file.
    """
    res = subprocess.run(['gopls', 'symbols', filepath],
                         capture_output=True, text=True)
    res.check_returncode()

    structs = []
    for n, line in enumerate(res.stdout.split('\n'), 1):
        try:
            if not line.strip():
                continue

            parts = line.split()
            if parts[1] == 'Struct':
                symbol_start = parts[2].split('-')[0]
                line, col = list(map(int, symbol_start.split(':')))
                structs.append(FoundStruct(parts[0], filepath, line, col))
        except Exception as e:
            logging.error(f'parse error {filepath}:{n}: {e}')
            raise e

    return structs


def check_implements(struct, iface):
    "check the specified FoundStruct implements the named interface"
    offset = get_byte_offset(struct.path, struct.line, struct.col)

    res = subprocess.run(['guru', 'implements', f'{struct.path}:#{offset}'],
                         capture_output=True, text=True)
    res.check_returncode()

    lines = res.stdout.strip().split('\n')
    for line in lines[1:]:
        _, implemented =  line.rsplit('implements ', 1)
        if implemented == iface:
            return True

    return False


def get_byte_offset(path, line, col):
    """
    Returns the byte offset of the specified line and column within the
    specified file.

    This is useful for converting the ctags-like output of symbols, which
    references them by line/col, into something that can be given to
    golang.org/x/tools/cmd/guru.
    """
    with open(path, 'rb') as fh:
        buf = fh.read()

    offset = 0
    for _ in range(line - 1):
        offset = buf.index(b'\n', offset+1)

    # note: col is in effect a _character_ offset within a line. This will
    # break if there are multi-byte chars on the line prior to col. However,
    # since this is intended for identifying symbol definition offsets for
    # guru, the likelihood of that actually happening is vanishingly small.
    # (the only things we'd expect to see on a line prior to the symbol name in
    # a definition would be structural syntax, e.g. parens, and reserved words,
    # all of which are represented in ASCII).
    return offset + col


def get_package(path):
    """
    Return the import spec for the package contianing the specified file.

    Note: this is done purely based on directory names, assuming that the
          "package" directive inside the file matches its location.
    """
    path = os.path.abspath(path)

    dir_path = os.path.dirname(path)
    mod_path = os.path.join(dir_path, 'go.mod')
    suffix = ''
    while not os.path.isfile(mod_path):
        if dir_path == '/':
            raise ValueError(f'Path "{path}" does not appear to be inside a go module.')
        dir_path, dir_name = os.path.split(dir_path)
        mod_path = os.path.join(dir_path, 'go.mod')
        if suffix:
            suffix = '/'.join([dir_name, suffix])
        else:
            suffix = dir_name

    with open(mod_path) as fh:
        for line in fh:
            if line.startswith('module '):
                mod_name = line.strip().split()[1]

                if suffix:
                    suffix = '/'.join([mod_name, suffix])
                else:
                    suffix = mod_name

                break
        else:
            raise ValueError(f'"{mod_path}" does not contain a module directive.')

    return suffix


def gen_schemes(implementations, package):
    """
    Generate the text of a go file that imports discovered schemes and creates
    a plugins list that may be used to populate the builtin plugin mananger.
    """
    seen_import_packages = {}
    import_lines = []
    impl_lines = []

    for impl in implementations:
        import_pkg = get_package(impl.path)

        label = seen_import_packages.get(import_pkg)
        if label is None:
            label = 'scheme{}'.format(len(seen_import_packages) + 1)
            seen_import_packages[import_pkg] = label
            import_lines.append(f'\t{label} "{import_pkg}"')

        impl_lines.append(f'\t&{label}.{impl.name}{{}},')

    return TEMPLATE.substitute({
        'package': package,
        'imports': '\n'.join(import_lines),
        'implementations': '\n'.join(impl_lines),
        })


def check_dependencies():
    if not shutil.which('gopls'):
        print('''\
        Please install gopls using

            go install golang.org/x/tools/gopls@latest

        and make sure that it is in PATH.
        ''', file=sys.stderr)
        sys.exit(1)

    if not shutil.which('guru'):
        print('''\
        Please install guru using

            go install golang.org/x/tools/cmd/guru@latest

        and make sure that it is in PATH.
        ''', file=sys.stderr)
        sys.exit(1)


def main(path, package):
    impls = find_implementations(PLUGIN_INTERFACE, path)
    print(gen_schemes(impls, package))


if __name__ == '__main__':
    import argparse

    logging.basicConfig(
        format='%(levelname)s: %(message)s',
        stream=sys.stderr,
    )

    parser = argparse.ArgumentParser()
    parser.add_argument('directory', metavar='DIR',
                        help="directory to scan for plugin implementations.")
    parser.add_argument('-p', '--package', metavar='NAME', default='builtin',
                        help="the name to use for the package directive in the generated go file.")
    args = parser.parse_args()

    check_dependencies()
    main(args.directory, args.package)

